{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brendan Johnston\\\\Documents\\\\VSCode Projects\\\\Dentist Scheduler - CoFi Project\\\\DentistScheduler\\\\Dentist-Scheduler\\\\src\\\\App.js\";\n// Dentist Scheduler Application\n// Written by Brendan Johnston\n\n/*\n  This application allows for a Dentist office to schedule, and maintain new appointments. This also allows for customers to create new appointments for themselves.\n*/\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport react from \"react\";\nimport NewAppointment from \"./Components/NewAppointments\"; // import Calendar from \"react-calendar\";\n\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar';\nimport \"react-calendar/dist/Calendar.css\";\nimport axios from \"axios\";\nimport AvailableTimes from \"./Components/AvailableTimes\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; // import 'react-big-calendar/lib/sass/styles';\n\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport getDay from 'date-fns/getDay';\nimport enUS from 'date-fns/locale/en-US';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MainScheduler extends react.Component {\n  constructor(props) {\n    super(props);\n\n    this.onCalendarChange = param => {\n      console.log(param);\n      let date = param.getDate();\n      let month = param.getMonth() + 1;\n      let year = param.getFullYear();\n      let separator = \"/\";\n      let stringVal = `${month < 10 ? `0${month}` : `${month}`}${separator}${date}${separator}${year}`;\n      this.setState({\n        selectedDate: stringVal\n      });\n      this.checkAvailableTimes();\n    };\n\n    this.dateChange = event => {};\n\n    this.onTimeChange = change => {\n      this.setState({\n        appointmentTime: change,\n        newAppointmentIsOpen: true\n      });\n    };\n\n    this.checkAvailableTimes = () => {// var url =\n      //   \"http://localhost:5083/DentistScheduler/GetAppointmentsByDate/\" +\n      //   this.state.selectedDate;\n      // const header = {\n      //   \"Access-Control-Allow-Origin\": \"*\",\n      // };\n      // var success = axios\n      //   .get(url, header)\n      //   .then((availableTimesFromServer) => {\n      //     console.log(availableTimesFromServer);\n      //     //let array = [];\n      //     // availableTimesFromServer.data.forEach(element => {\n      //     //   type Appointment = {\n      //     //     time: element.item1,\n      //     //     appointmentValue: element.item2\n      //     //   };\n      //     //   array.push(Appointment);\n      //     // })\n      //     this.setState({ availableTimes: availableTimesFromServer.data });\n      //   })\n      //   .catch((ex) => {\n      //     console.log(ex);\n      //   });\n      // console.log(success);\n    };\n\n    this.newAppointmentClose = () => {\n      this.setState({\n        newAppointmentIsOpen: false\n      });\n    };\n\n    let _date = this.getCurrentDate(\"/\");\n\n    console.log(_date);\n    this.state = {\n      selectedDate: _date,\n      availableTimes: undefined,\n      dateValue: undefined,\n      appointmentList: undefined,\n      newAppointmentIsOpen: false,\n      localizer: new dateFnsLocalizer({\n        format,\n        parse,\n        startOfWeek,\n        getDay\n      })\n    };\n    this.checkAvailableTimes();\n  }\n\n  getCurrentDate() {\n    let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let newDate = new Date();\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n    return `${month < 10 ? `0${month}` : `${month}`}${separator}${date}${separator}${year}`;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"Header-Label\",\n        children: \"Smiley Faces Dentist Scheduler\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: this.state.localizer // events={myEventsList}\n        ,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          height: 500\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AvailableTimes, {\n        style: {\n          display: \"flex\"\n        },\n        onTimeChange: this.onTimeChange,\n        availableTimes: this.state.availableTimes,\n        selectedDate: this.state.selectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date Selected: \", this.state.selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Time Selected: \", this.state.appointmentTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewAppointment, {\n        date: this.state.selectedDate,\n        newAppointmentModelIsOpen: this.state.newAppointmentIsOpen,\n        onNewAppointmentClose: this.newAppointmentClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: \"table\",\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-Header\",\n      children: /*#__PURE__*/_jsxDEV(MainScheduler, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brendan Johnston/Documents/VSCode Projects/Dentist Scheduler - CoFi Project/DentistScheduler/Dentist-Scheduler/src/App.js"],"names":["logo","react","NewAppointment","Calendar","dateFnsLocalizer","axios","AvailableTimes","format","parse","startOfWeek","getDay","enUS","MainScheduler","Component","constructor","props","onCalendarChange","param","console","log","date","getDate","month","getMonth","year","getFullYear","separator","stringVal","setState","selectedDate","checkAvailableTimes","dateChange","event","onTimeChange","change","appointmentTime","newAppointmentIsOpen","newAppointmentClose","getCurrentDate","state","availableTimes","undefined","dateValue","appointmentList","localizer","newDate","Date","render","height","display","App","width"],"mappings":"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","sourcesContent":["// Dentist Scheduler Application\n// Written by Brendan Johnston\n\n/*\n  This application allows for a Dentist office to schedule, and maintain new appointments. This also allows for customers to create new appointments for themselves.\n*/\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport react from \"react\";\nimport NewAppointment from \"./Components/NewAppointments\";\n// import Calendar from \"react-calendar\";\n  import {Calendar, dateFnsLocalizer} from 'react-big-calendar';\nimport \"react-calendar/dist/Calendar.css\";\nimport axios from \"axios\";\nimport AvailableTimes from \"./Components/AvailableTimes\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'react-big-calendar/lib/sass/styles';\nimport format from 'date-fns/format'\nimport parse from 'date-fns/parse'\nimport startOfWeek from 'date-fns/startOfWeek'\nimport getDay from 'date-fns/getDay'\nimport enUS from 'date-fns/locale/en-US'\n\nclass MainScheduler extends react.Component {\n  constructor(props) {\n    super(props);\n\n    let date = this.getCurrentDate(\"/\");\n    console.log(date);\n    this.state = {\n      selectedDate: date,\n      availableTimes: undefined,\n      dateValue: undefined,\n      appointmentList: undefined,\n      newAppointmentIsOpen: false,\n      localizer: new dateFnsLocalizer({\n        format,\n        parse,\n        startOfWeek,\n        getDay,\n      })\n    };\n\n    this.checkAvailableTimes();\n  }\n\n  onCalendarChange = (param) => {\n    console.log(param);\n    let date = param.getDate();\n    let month = param.getMonth() + 1;\n    let year = param.getFullYear();\n    let separator = \"/\";\n\n    let stringVal = `${\n      month < 10 ? `0${month}` : `${month}`\n    }${separator}${date}${separator}${year}`;\n\n    this.setState({\n      selectedDate: stringVal,\n    });\n    this.checkAvailableTimes();\n  };\n\n  dateChange = (event) => {};\n\n  onTimeChange = (change) => {\n    this.setState({\n      appointmentTime: change,\n      newAppointmentIsOpen: true,\n    });\n  };\n\n  checkAvailableTimes = () => {\n    // var url =\n    //   \"http://localhost:5083/DentistScheduler/GetAppointmentsByDate/\" +\n    //   this.state.selectedDate;\n    // const header = {\n    //   \"Access-Control-Allow-Origin\": \"*\",\n    // };\n    // var success = axios\n    //   .get(url, header)\n    //   .then((availableTimesFromServer) => {\n    //     console.log(availableTimesFromServer);\n\n    //     //let array = [];\n    //     // availableTimesFromServer.data.forEach(element => {\n    //     //   type Appointment = {\n    //     //     time: element.item1,\n    //     //     appointmentValue: element.item2\n    //     //   };\n    //     //   array.push(Appointment);\n    //     // })\n\n    //     this.setState({ availableTimes: availableTimesFromServer.data });\n    //   })\n    //   .catch((ex) => {\n    //     console.log(ex);\n    //   });\n    // console.log(success);\n  };\n\n  newAppointmentClose = () =>\n  {\n    this.setState({\n      newAppointmentIsOpen: false\n    });\n  }\n\n  getCurrentDate(separator = \"\") {\n    let newDate = new Date();\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n\n    return `${\n      month < 10 ? `0${month}` : `${month}`\n    }${separator}${date}${separator}${year}`;\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <label className=\"Header-Label\">Smiley Faces Dentist Scheduler</label>\n        {/* <Calendar\n          style={{ display: \"flex\" }}\n          onChange={this.onCalendarChange}\n          value={this.state.dateValue}\n          // tileDisabled={this.tileDisabled}\n        /> */}\n        <Calendar\n          localizer={this.state.localizer}\n          // events={myEventsList}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 500 }}\n        />\n        <AvailableTimes\n          style={{ display: \"flex\" }}\n          onTimeChange={this.onTimeChange}\n          availableTimes={this.state.availableTimes}\n          selectedDate={this.state.selectedDate}\n        />\n        <br />\n        <label>Date Selected: {this.state.selectedDate}</label>\n        <span>&nbsp;</span>\n        <label>Time Selected: {this.state.appointmentTime}</label>\n\n        <NewAppointment\n          date={this.state.selectedDate}\n          newAppointmentModelIsOpen={this.state.newAppointmentIsOpen}\n          onNewAppointmentClose={this.newAppointmentClose}\n        ></NewAppointment>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{display: \"table\", width: \"100%\"}}>\n      <header className=\"App-Header\">\n        <MainScheduler></MainScheduler>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}